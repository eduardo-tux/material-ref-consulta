
O que é o Pyenv?

O Pyenv é um gerenciador de ambientes Python.
De maneira resumida, é uma ferramente que te permite 
escolher entre diversas versões do Python para usar.

Primeiramente, precisamos instalar algumas bibliotecas necessárias 
para o build (algumas não relacionadas ao Python, como curl, git, etc, mas 
se você for Dev, com certeza as utilizará em algum momento):

Copie e cole no terminal:

    sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm gettext libncurses5-dev tk-dev tcl-dev blt-dev libgdbm-dev git python-dev python3-dev aria2 vim libnss3-tools python3-venv liblzma-dev libpq-dev


#----------------------------
#  Instalando o pyenv
#----------------------------
Copie e cole no terminal:

    curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash


#-----------------------------------
#  Configurando arquivos do sistema
#-----------------------------------
Neste caso, irei editar o .bashrc, mas como há outros tipos, 
como por exemplo o .zshrc, é possível identificar qual 
o shell atual utilizando o comando abaixo:

    echo $SHELL

    OBS: o Exemplo de saída do exemplo foi: /bin/bash

Com um editor de texto de sua preferência, 
abra o arquivo .bashrc e cole os comandos abaixo:

    export PYENV_ROOT=”$HOME/.pyenv”
    export PATH=”$PYENV_ROOT/bin:$PATH”
    if command -v pyenv 1>/dev/null 2>&1; then
    eval “$(pyenv init –path)”
    fi


#------------------------------------
#  Verificando versões de Python
#------------------------------------
Copie e cole no terminal:

    pyenv install -l


#---------------------------------
#  atualizando o arquivo .bashrc
#---------------------------------
Por garantia, é útil executar o arquivo ./bashrc com o seguinte comando:

    source ./bashrc


#----------------------------
#  Instalação do Python
#----------------------------
Após decidir qual versão de Python será utilizada, basta rodar: 

    pyenv install <versão escolhida>
    

#------------------------------
#  Escolhendo a versão padrão
#------------------------------
Para colocar a versão instalada como a global (default do seu computador), basta rodar:

    pyenv global <versao>
    
#----------------------------------------------------
#Escolhendo uma versão diferente para cada projeto
#----------------------------------------------------
Dentro do diretório do projeto rode o comando:

    pyenv local <versão>
    
Dessa forma você poderá ter um projeto com versões diferentes. Por exemplo, 
você pode ter um projeto utilizando Python 3.5 onde as f-strings, por exemplo, 
ainda não haviam sido implementadas e criar um outro projeto já utilizando o 
Python 3.6 onde esta funcionalidade já está disponível.    


#-------------------------------------------------------
#  Verificando as versões de Python do sistema com Pyenv
#-------------------------------------------------------
Copie e cole no terminal:

    pyenv versions   
 
Com isso serão apresentadas as versões que foram instaladas, mais a versão nativa (system):

    system
    versão escolhida instalada com o pyenv

E caso queira voltar para a versão nativa, basta novamente utilizar o comando “global”:

    pyenv global system
    
    
Outra forma de verificar a versão está sendo utilizada, é com o comando:

    which python
    
    OBS: o resultado será: /home/seuUsuario/.pyenv/shims/python    


